#include <ctype.h>
#include <grp.h>
#include <pwd.h>
#include <stdio.h>
#include <stdlib.h>
#include <sys/stat.h>
#include <sys/sysmacros.h>
#include <sys/types.h>
#include <time.h>
#include <unistd.h>
//This function is for Step 4
char * time2str(const time_t * when, long ns) {
  char * ans = malloc(128 * sizeof(*ans));
  char temp1[64];
  char temp2[32];
  const struct tm * t = localtime(when);
  strftime(temp1, 512, "%Y-%m-%d %H:%M:%S", t);
  strftime(temp2, 32, "%z", t);
  snprintf(ans, 128, "%s.%09ld %s", temp1, ns, temp2);
  return ans;
}
//function for step1
void printStep1(struct stat sb) {
  const char * filetype = NULL;  // a string pointer to the filetype
  switch (sb.st_mode & S_IFMT) {
    case S_IFBLK:
      filetype = "block special file";
      break;
    case S_IFCHR:
      filetype = "character special file";
      break;
    case S_IFDIR:
      filetype = "directory";
      break;
    case S_IFIFO:
      filetype = "fifo";
      break;
    case S_IFLNK:
      filetype = "symbolic link";
      break;
    case S_IFREG:
      filetype = "regular file";
      break;
    case S_IFSOCK:
      filetype = "socket";
      break;
    default:
      filetype = "unknown?";
      break;
  }
  printf("  Size: %-10lu\tBlocks: %-10lu IO Block: %-6lu %s\n",
         sb.st_size,
         sb.st_blocks,
         sb.st_blksize,
         filetype);
  //step 6
  if (S_ISCHR(sb.st_mode) || S_ISBLK(sb.st_mode)) {
    printf("Device: %lxh/%lud\tInode: %-10lu  Links: %-5lu Device type: %d,%d\n",
           sb.st_dev,
           sb.st_dev,
           sb.st_ino,
           (unsigned long)sb.st_nlink,
           major(sb.st_rdev),
           minor(sb.st_rdev));
  }
  else {
    printf("Device: %lxh/%lud\tInode: %-10lu  Links: %lu\n",
           sb.st_dev,
           sb.st_dev,
           sb.st_ino,
           (unsigned long)sb.st_nlink);
  }
}
//function for step2
void printStep2(struct stat sb) {
  char str[11];  // declare an array to store a string which has a length of 11
  switch (sb.st_mode & S_IFMT) {
    case S_IFBLK:
      str[0] = 'b';
      break;
    case S_IFCHR:
      str[0] = 'c';
      break;
    case S_IFDIR:
      str[0] = 'd';
      break;
    case S_IFIFO:
      str[0] = 'p';
      break;
    case S_IFLNK:
      str[0] = 'l';
      break;
    case S_IFREG:
      str[0] = '-';
      break;
    case S_IFSOCK:
      str[0] = 's';
      break;
    default:
      str[0] = ' ';
      break;
  }
  if ((sb.st_mode & S_IRUSR) == 0) {
    str[1] = '-';
  }
  else {
    str[1] = 'r';
  }
  if ((sb.st_mode & S_IWUSR) == 0) {
    str[2] = '-';
  }
  else {
    str[2] = 'w';
  }
  if ((sb.st_mode & S_IXUSR) == 0) {
    str[3] = '-';
  }
  else {
    str[3] = 'x';
  }
  if ((sb.st_mode & S_IRGRP) == 0) {
    str[4] = '-';
  }
  else {
    str[4] = 'r';
  }
  if ((sb.st_mode & S_IWGRP) == 0) {
    str[5] = '-';
  }
  else {
    str[5] = 'w';
  }
  if ((sb.st_mode & S_IXGRP) == 0) {
    str[6] = '-';
  }
  else {
    str[6] = 'x';
  }
  if ((sb.st_mode & S_IROTH) == 0) {
    str[7] = '-';
  }
  else {
    str[7] = 'r';
  }
  if ((sb.st_mode & S_IWOTH) == 0) {
    str[8] = '-';
  }
  else {
    str[8] = 'w';
  }
  if ((sb.st_mode & S_IXOTH) == 0) {
    str[9] = '-';
  }
  else {
    str[9] = 'x';
  }
  str[10] = '\0';  //add '\0' make sure it is a string
  printf("Access: (%04o/%s)", sb.st_mode & ~S_IFMT, str);
}
//function for step3
void printStep3(struct stat sb) {
  struct passwd * pass = getpwuid(sb.st_uid);
  struct group * group = getgrgid(sb.st_gid);
  printf(
      "  Uid: (%5d/%8s)   Gid: (%5d/%8s)\n", sb.st_uid, pass->pw_name, sb.st_gid, group->gr_name);
}
//function for step4
void printStep4(struct stat sb) {
  char * timestrAccess = time2str(&sb.st_atime, sb.st_atim.tv_nsec);
  char * timestrModify = time2str(&sb.st_mtime, sb.st_mtim.tv_nsec);
  char * timestrChange = time2str(&sb.st_ctime, sb.st_ctim.tv_nsec);
  printf("Access: %s\n", timestrAccess);
  printf("Modify: %s\n", timestrModify);
  printf("Change: %s\n", timestrChange);
  printf(" Birth: -\n");
  free(timestrAccess);
  free(timestrModify);
  free(timestrChange);
}
//main function for step 1
int main(int argc, char * argv[]) {
  if (argc < 2) {
    fprintf(stderr, "stat: missing operand\n");
    exit(EXIT_FAILURE);
  }
  for (int i = 1; i < argc; i++) {
    //if lstat function success
    struct stat sb;
    if (lstat(argv[i], &sb) == -1) {
      fprintf(stderr,"stat: cannot stat '%s'",argv[i]);
      perror("");
      exit(EXIT_FAILURE);
    }
    //step 7
    if (S_ISLNK(sb.st_mode)) {
      char linktarget[256];
      ssize_t len = readlink(argv[i], linktarget, 256);
      if (len <= 256 && len >= 0) {
        linktarget[len] = '\0';
      }
      else {
        fprintf(stderr, "len error");
        exit(EXIT_FAILURE);
      }
      printf("  File: %s -> %s\n", argv[i], linktarget);
    }
    else {
      printf("  File: %s\n", argv[i]);
    }
    printStep1(sb);  //step 1
    printStep2(sb);  //step 2
    printStep3(sb);  //step 3
    printStep4(sb);  //step 4
  }
}
